"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnprocessableEntityError = exports.PermissionDeniedError = exports.InternalServerError = exports.AuthenticationError = exports.BadRequestError = exports.RateLimitError = exports.ConflictError = exports.NotFoundError = exports.APIUserAbortError = exports.APIConnectionTimeoutError = exports.APIConnectionError = exports.APIError = exports.DodoPaymentsError = exports.fileFromPath = exports.toFile = exports.DodoPayments = void 0;
const Core = __importStar(require("./core.js"));
const Errors = __importStar(require("./error.js"));
const Pagination = __importStar(require("./pagination.js"));
const Uploads = __importStar(require("./uploads.js"));
const API = __importStar(require("./resources/index.js"));
const addons_1 = require("./resources/addons.js");
const brands_1 = require("./resources/brands.js");
const discounts_1 = require("./resources/discounts.js");
const disputes_1 = require("./resources/disputes.js");
const license_key_instances_1 = require("./resources/license-key-instances.js");
const license_keys_1 = require("./resources/license-keys.js");
const licenses_1 = require("./resources/licenses.js");
const misc_1 = require("./resources/misc.js");
const payments_1 = require("./resources/payments.js");
const payouts_1 = require("./resources/payouts.js");
const refunds_1 = require("./resources/refunds.js");
const subscriptions_1 = require("./resources/subscriptions.js");
const webhook_events_1 = require("./resources/webhook-events.js");
const customers_1 = require("./resources/customers/customers.js");
const invoices_1 = require("./resources/invoices/invoices.js");
const products_1 = require("./resources/products/products.js");
const environments = {
    live_mode: 'https://live.dodopayments.com',
    test_mode: 'https://test.dodopayments.com',
};
/**
 * API Client for interfacing with the Dodo Payments API.
 */
class DodoPayments extends Core.APIClient {
    /**
     * API Client for interfacing with the Dodo Payments API.
     *
     * @param {string | undefined} [opts.bearerToken=process.env['DODO_PAYMENTS_API_KEY'] ?? undefined]
     * @param {Environment} [opts.environment=live_mode] - Specifies the environment URL to use for the API.
     * @param {string} [opts.baseURL=process.env['DODO_PAYMENTS_BASE_URL'] ?? https://live.dodopayments.com] - Override the default base URL for the API.
     * @param {number} [opts.timeout=1 minute] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.
     * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.
     * @param {Core.Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.
     * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.
     * @param {Core.Headers} opts.defaultHeaders - Default headers to include with every request to the API.
     * @param {Core.DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.
     */
    constructor({ baseURL = Core.readEnv('DODO_PAYMENTS_BASE_URL'), bearerToken = Core.readEnv('DODO_PAYMENTS_API_KEY'), ...opts } = {}) {
        if (bearerToken === undefined) {
            throw new Errors.DodoPaymentsError("The DODO_PAYMENTS_API_KEY environment variable is missing or empty; either provide it, or instantiate the DodoPayments client with an bearerToken option, like new DodoPayments({ bearerToken: 'My Bearer Token' }).");
        }
        const options = {
            bearerToken,
            ...opts,
            baseURL,
            environment: opts.environment ?? 'live_mode',
        };
        if (baseURL && opts.environment) {
            throw new Errors.DodoPaymentsError('Ambiguous URL; The `baseURL` option (or DODO_PAYMENTS_BASE_URL env var) and the `environment` option are given. If you want to use the environment you must pass baseURL: null');
        }
        super({
            baseURL: options.baseURL || environments[options.environment || 'live_mode'],
            timeout: options.timeout ?? 60000 /* 1 minute */,
            httpAgent: options.httpAgent,
            maxRetries: options.maxRetries,
            fetch: options.fetch,
        });
        this.payments = new API.Payments(this);
        this.subscriptions = new API.Subscriptions(this);
        this.invoices = new API.Invoices(this);
        this.licenses = new API.Licenses(this);
        this.licenseKeys = new API.LicenseKeys(this);
        this.licenseKeyInstances = new API.LicenseKeyInstances(this);
        this.customers = new API.Customers(this);
        this.refunds = new API.Refunds(this);
        this.disputes = new API.Disputes(this);
        this.payouts = new API.Payouts(this);
        this.webhookEvents = new API.WebhookEvents(this);
        this.products = new API.Products(this);
        this.misc = new API.Misc(this);
        this.discounts = new API.Discounts(this);
        this.addons = new API.Addons(this);
        this.brands = new API.Brands(this);
        this._options = options;
        this.bearerToken = bearerToken;
    }
    defaultQuery() {
        return this._options.defaultQuery;
    }
    defaultHeaders(opts) {
        return {
            ...super.defaultHeaders(opts),
            ...this._options.defaultHeaders,
        };
    }
    authHeaders(opts) {
        return { Authorization: `Bearer ${this.bearerToken}` };
    }
}
exports.DodoPayments = DodoPayments;
_a = DodoPayments;
DodoPayments.DodoPayments = _a;
DodoPayments.DEFAULT_TIMEOUT = 60000; // 1 minute
DodoPayments.DodoPaymentsError = Errors.DodoPaymentsError;
DodoPayments.APIError = Errors.APIError;
DodoPayments.APIConnectionError = Errors.APIConnectionError;
DodoPayments.APIConnectionTimeoutError = Errors.APIConnectionTimeoutError;
DodoPayments.APIUserAbortError = Errors.APIUserAbortError;
DodoPayments.NotFoundError = Errors.NotFoundError;
DodoPayments.ConflictError = Errors.ConflictError;
DodoPayments.RateLimitError = Errors.RateLimitError;
DodoPayments.BadRequestError = Errors.BadRequestError;
DodoPayments.AuthenticationError = Errors.AuthenticationError;
DodoPayments.InternalServerError = Errors.InternalServerError;
DodoPayments.PermissionDeniedError = Errors.PermissionDeniedError;
DodoPayments.UnprocessableEntityError = Errors.UnprocessableEntityError;
DodoPayments.toFile = Uploads.toFile;
DodoPayments.fileFromPath = Uploads.fileFromPath;
DodoPayments.Payments = payments_1.Payments;
DodoPayments.PaymentListResponsesDefaultPageNumberPagination =
    payments_1.PaymentListResponsesDefaultPageNumberPagination;
DodoPayments.Subscriptions = subscriptions_1.Subscriptions;
DodoPayments.SubscriptionListResponsesDefaultPageNumberPagination =
    subscriptions_1.SubscriptionListResponsesDefaultPageNumberPagination;
DodoPayments.Invoices = invoices_1.Invoices;
DodoPayments.Licenses = licenses_1.Licenses;
DodoPayments.LicenseKeys = license_keys_1.LicenseKeys;
DodoPayments.LicenseKeysDefaultPageNumberPagination = license_keys_1.LicenseKeysDefaultPageNumberPagination;
DodoPayments.LicenseKeyInstances = license_key_instances_1.LicenseKeyInstances;
DodoPayments.LicenseKeyInstancesDefaultPageNumberPagination = license_key_instances_1.LicenseKeyInstancesDefaultPageNumberPagination;
DodoPayments.Customers = customers_1.Customers;
DodoPayments.CustomersDefaultPageNumberPagination = customers_1.CustomersDefaultPageNumberPagination;
DodoPayments.Refunds = refunds_1.Refunds;
DodoPayments.RefundsDefaultPageNumberPagination = refunds_1.RefundsDefaultPageNumberPagination;
DodoPayments.Disputes = disputes_1.Disputes;
DodoPayments.DisputeListResponsesDefaultPageNumberPagination =
    disputes_1.DisputeListResponsesDefaultPageNumberPagination;
DodoPayments.Payouts = payouts_1.Payouts;
DodoPayments.PayoutListResponsesDefaultPageNumberPagination = payouts_1.PayoutListResponsesDefaultPageNumberPagination;
DodoPayments.WebhookEvents = webhook_events_1.WebhookEvents;
DodoPayments.WebhookEventsDefaultPageNumberPagination = webhook_events_1.WebhookEventsDefaultPageNumberPagination;
DodoPayments.Products = products_1.Products;
DodoPayments.ProductListResponsesDefaultPageNumberPagination =
    products_1.ProductListResponsesDefaultPageNumberPagination;
DodoPayments.Misc = misc_1.Misc;
DodoPayments.Discounts = discounts_1.Discounts;
DodoPayments.DiscountsDefaultPageNumberPagination = discounts_1.DiscountsDefaultPageNumberPagination;
DodoPayments.Addons = addons_1.Addons;
DodoPayments.AddonResponsesDefaultPageNumberPagination = addons_1.AddonResponsesDefaultPageNumberPagination;
DodoPayments.Brands = brands_1.Brands;
var uploads_1 = require("./uploads.js");
Object.defineProperty(exports, "toFile", { enumerable: true, get: function () { return uploads_1.toFile; } });
Object.defineProperty(exports, "fileFromPath", { enumerable: true, get: function () { return uploads_1.fileFromPath; } });
var error_1 = require("./error.js");
Object.defineProperty(exports, "DodoPaymentsError", { enumerable: true, get: function () { return error_1.DodoPaymentsError; } });
Object.defineProperty(exports, "APIError", { enumerable: true, get: function () { return error_1.APIError; } });
Object.defineProperty(exports, "APIConnectionError", { enumerable: true, get: function () { return error_1.APIConnectionError; } });
Object.defineProperty(exports, "APIConnectionTimeoutError", { enumerable: true, get: function () { return error_1.APIConnectionTimeoutError; } });
Object.defineProperty(exports, "APIUserAbortError", { enumerable: true, get: function () { return error_1.APIUserAbortError; } });
Object.defineProperty(exports, "NotFoundError", { enumerable: true, get: function () { return error_1.NotFoundError; } });
Object.defineProperty(exports, "ConflictError", { enumerable: true, get: function () { return error_1.ConflictError; } });
Object.defineProperty(exports, "RateLimitError", { enumerable: true, get: function () { return error_1.RateLimitError; } });
Object.defineProperty(exports, "BadRequestError", { enumerable: true, get: function () { return error_1.BadRequestError; } });
Object.defineProperty(exports, "AuthenticationError", { enumerable: true, get: function () { return error_1.AuthenticationError; } });
Object.defineProperty(exports, "InternalServerError", { enumerable: true, get: function () { return error_1.InternalServerError; } });
Object.defineProperty(exports, "PermissionDeniedError", { enumerable: true, get: function () { return error_1.PermissionDeniedError; } });
Object.defineProperty(exports, "UnprocessableEntityError", { enumerable: true, get: function () { return error_1.UnprocessableEntityError; } });
exports = module.exports = DodoPayments;
exports.default = DodoPayments;
//# sourceMappingURL=index.js.map