import { APIResource } from "../resource.js";
import * as Core from "../core.js";
import * as PaymentsAPI from "./payments.js";
import { DefaultPageNumberPagination, type DefaultPageNumberPaginationParams } from "../pagination.js";
export declare class Disputes extends APIResource {
    retrieve(disputeId: string, options?: Core.RequestOptions): Core.APIPromise<DisputeRetrieveResponse>;
    list(query?: DisputeListParams, options?: Core.RequestOptions): Core.PagePromise<DisputeListResponsesDefaultPageNumberPagination, DisputeListResponse>;
    list(options?: Core.RequestOptions): Core.PagePromise<DisputeListResponsesDefaultPageNumberPagination, DisputeListResponse>;
}
export declare class DisputeListResponsesDefaultPageNumberPagination extends DefaultPageNumberPagination<DisputeListResponse> {
}
export interface Dispute {
    /**
     * The amount involved in the dispute, represented as a string to accommodate
     * precision.
     */
    amount: string;
    /**
     * The unique identifier of the business involved in the dispute.
     */
    business_id: string;
    /**
     * The timestamp of when the dispute was created, in UTC.
     */
    created_at: string;
    /**
     * The currency of the disputed amount, represented as an ISO 4217 currency code.
     */
    currency: string;
    /**
     * The unique identifier of the dispute.
     */
    dispute_id: string;
    dispute_stage: DisputeStage;
    dispute_status: DisputeStatus;
    /**
     * The unique identifier of the payment associated with the dispute.
     */
    payment_id: string;
    /**
     * Remarks
     */
    remarks?: string | null;
}
export type DisputeStage = 'pre_dispute' | 'dispute' | 'pre_arbitration';
export type DisputeStatus = 'dispute_opened' | 'dispute_expired' | 'dispute_accepted' | 'dispute_cancelled' | 'dispute_challenged' | 'dispute_won' | 'dispute_lost';
export interface DisputeRetrieveResponse {
    /**
     * The amount involved in the dispute, represented as a string to accommodate
     * precision.
     */
    amount: string;
    /**
     * The unique identifier of the business involved in the dispute.
     */
    business_id: string;
    /**
     * The timestamp of when the dispute was created, in UTC.
     */
    created_at: string;
    /**
     * The currency of the disputed amount, represented as an ISO 4217 currency code.
     */
    currency: string;
    customer: PaymentsAPI.CustomerLimitedDetails;
    /**
     * The unique identifier of the dispute.
     */
    dispute_id: string;
    dispute_stage: DisputeStage;
    dispute_status: DisputeStatus;
    /**
     * The unique identifier of the payment associated with the dispute.
     */
    payment_id: string;
    /**
     * Reason for the dispute
     */
    reason?: string | null;
    /**
     * Remarks
     */
    remarks?: string | null;
}
export interface DisputeListResponse {
    /**
     * The amount involved in the dispute, represented as a string to accommodate
     * precision.
     */
    amount: string;
    /**
     * The unique identifier of the business involved in the dispute.
     */
    business_id: string;
    /**
     * The timestamp of when the dispute was created, in UTC.
     */
    created_at: string;
    /**
     * The currency of the disputed amount, represented as an ISO 4217 currency code.
     */
    currency: string;
    /**
     * The unique identifier of the dispute.
     */
    dispute_id: string;
    dispute_stage: DisputeStage;
    dispute_status: DisputeStatus;
    /**
     * The unique identifier of the payment associated with the dispute.
     */
    payment_id: string;
}
export interface DisputeListParams extends DefaultPageNumberPaginationParams {
    /**
     * Get events after this created time
     */
    created_at_gte?: string | null;
    /**
     * Get events created before this time
     */
    created_at_lte?: string | null;
    /**
     * Filter by customer_id
     */
    customer_id?: string | null;
    /**
     * Filter by dispute stage
     */
    dispute_stage?: DisputeStage | null;
    /**
     * Filter by dispute status
     */
    dispute_status?: DisputeStatus | null;
}
export declare namespace Disputes {
    export { type Dispute as Dispute, type DisputeStage as DisputeStage, type DisputeStatus as DisputeStatus, type DisputeRetrieveResponse as DisputeRetrieveResponse, type DisputeListResponse as DisputeListResponse, DisputeListResponsesDefaultPageNumberPagination as DisputeListResponsesDefaultPageNumberPagination, type DisputeListParams as DisputeListParams, };
}
//# sourceMappingURL=disputes.d.ts.map