import { APIResource } from "../resource.js";
import * as Core from "../core.js";
import * as MiscAPI from "./misc.js";
import * as PaymentsAPI from "./payments.js";
import { DefaultPageNumberPagination, type DefaultPageNumberPaginationParams } from "../pagination.js";
export declare class Subscriptions extends APIResource {
    create(body: SubscriptionCreateParams, options?: Core.RequestOptions): Core.APIPromise<SubscriptionCreateResponse>;
    retrieve(subscriptionId: string, options?: Core.RequestOptions): Core.APIPromise<Subscription>;
    update(subscriptionId: string, body: SubscriptionUpdateParams, options?: Core.RequestOptions): Core.APIPromise<Subscription>;
    list(query?: SubscriptionListParams, options?: Core.RequestOptions): Core.PagePromise<SubscriptionListResponsesDefaultPageNumberPagination, SubscriptionListResponse>;
    list(options?: Core.RequestOptions): Core.PagePromise<SubscriptionListResponsesDefaultPageNumberPagination, SubscriptionListResponse>;
    changePlan(subscriptionId: string, body: SubscriptionChangePlanParams, options?: Core.RequestOptions): Core.APIPromise<void>;
    charge(subscriptionId: string, body: SubscriptionChargeParams, options?: Core.RequestOptions): Core.APIPromise<SubscriptionChargeResponse>;
}
export declare class SubscriptionListResponsesDefaultPageNumberPagination extends DefaultPageNumberPagination<SubscriptionListResponse> {
}
/**
 * Response struct representing subscription details
 */
export interface AddonCartResponseItem {
    addon_id: string;
    quantity: number;
}
/**
 * Response struct representing subscription details
 */
export interface Subscription {
    /**
     * Addons associated with this subscription
     */
    addons: Array<AddonCartResponseItem>;
    billing: PaymentsAPI.BillingAddress;
    /**
     * Indicates if the subscription will cancel at the next billing date
     */
    cancel_at_next_billing_date: boolean;
    /**
     * Timestamp when the subscription was created
     */
    created_at: string;
    currency: MiscAPI.Currency;
    customer: PaymentsAPI.CustomerLimitedDetails;
    metadata: Record<string, string>;
    /**
     * Timestamp of the next scheduled billing. Indicates the end of current billing
     * period
     */
    next_billing_date: string;
    /**
     * Wether the subscription is on-demand or not
     */
    on_demand: boolean;
    /**
     * Number of payment frequency intervals
     */
    payment_frequency_count: number;
    payment_frequency_interval: TimeInterval;
    /**
     * Timestamp of the last payment. Indicates the start of current billing period
     */
    previous_billing_date: string;
    /**
     * Identifier of the product associated with this subscription
     */
    product_id: string;
    /**
     * Number of units/items included in the subscription
     */
    quantity: number;
    /**
     * Amount charged before tax for each recurring payment in smallest currency unit
     * (e.g. cents)
     */
    recurring_pre_tax_amount: number;
    status: SubscriptionStatus;
    /**
     * Unique identifier for the subscription
     */
    subscription_id: string;
    /**
     * Number of subscription period intervals
     */
    subscription_period_count: number;
    subscription_period_interval: TimeInterval;
    /**
     * Indicates if the recurring_pre_tax_amount is tax inclusive
     */
    tax_inclusive: boolean;
    /**
     * Number of days in the trial period (0 if no trial)
     */
    trial_period_days: number;
    /**
     * Cancelled timestamp if the subscription is cancelled
     */
    cancelled_at?: string | null;
    /**
     * The discount id if discount is applied
     */
    discount_id?: string | null;
}
export type SubscriptionStatus = 'pending' | 'active' | 'on_hold' | 'paused' | 'cancelled' | 'failed' | 'expired';
export type TimeInterval = 'Day' | 'Week' | 'Month' | 'Year';
export interface SubscriptionCreateResponse {
    /**
     * Addons associated with this subscription
     */
    addons: Array<AddonCartResponseItem>;
    customer: PaymentsAPI.CustomerLimitedDetails;
    metadata: Record<string, string>;
    /**
     * First payment id for the subscription
     */
    payment_id: string;
    /**
     * Tax will be added to the amount and charged to the customer on each billing
     * cycle
     */
    recurring_pre_tax_amount: number;
    /**
     * Unique identifier for the subscription
     */
    subscription_id: string;
    /**
     * Client secret used to load Dodo checkout SDK NOTE : Dodo checkout SDK will be
     * coming soon
     */
    client_secret?: string | null;
    /**
     * The discount id if discount is applied
     */
    discount_id?: string | null;
    /**
     * URL to checkout page
     */
    payment_link?: string | null;
}
/**
 * Response struct representing subscription details
 */
export interface SubscriptionListResponse {
    billing: PaymentsAPI.BillingAddress;
    /**
     * Indicates if the subscription will cancel at the next billing date
     */
    cancel_at_next_billing_date: boolean;
    /**
     * Timestamp when the subscription was created
     */
    created_at: string;
    currency: MiscAPI.Currency;
    customer: PaymentsAPI.CustomerLimitedDetails;
    metadata: Record<string, string>;
    /**
     * Timestamp of the next scheduled billing. Indicates the end of current billing
     * period
     */
    next_billing_date: string;
    /**
     * Wether the subscription is on-demand or not
     */
    on_demand: boolean;
    /**
     * Number of payment frequency intervals
     */
    payment_frequency_count: number;
    payment_frequency_interval: TimeInterval;
    /**
     * Timestamp of the last payment. Indicates the start of current billing period
     */
    previous_billing_date: string;
    /**
     * Identifier of the product associated with this subscription
     */
    product_id: string;
    /**
     * Number of units/items included in the subscription
     */
    quantity: number;
    /**
     * Amount charged before tax for each recurring payment in smallest currency unit
     * (e.g. cents)
     */
    recurring_pre_tax_amount: number;
    status: SubscriptionStatus;
    /**
     * Unique identifier for the subscription
     */
    subscription_id: string;
    /**
     * Number of subscription period intervals
     */
    subscription_period_count: number;
    subscription_period_interval: TimeInterval;
    /**
     * Indicates if the recurring_pre_tax_amount is tax inclusive
     */
    tax_inclusive: boolean;
    /**
     * Number of days in the trial period (0 if no trial)
     */
    trial_period_days: number;
    /**
     * Cancelled timestamp if the subscription is cancelled
     */
    cancelled_at?: string | null;
    /**
     * The discount id if discount is applied
     */
    discount_id?: string | null;
}
export interface SubscriptionChargeResponse {
    payment_id: string;
}
export interface SubscriptionCreateParams {
    billing: PaymentsAPI.BillingAddress;
    customer: PaymentsAPI.CustomerRequest;
    /**
     * Unique identifier of the product to subscribe to
     */
    product_id: string;
    /**
     * Number of units to subscribe for. Must be at least 1.
     */
    quantity: number;
    /**
     * Attach addons to this subscription
     */
    addons?: Array<SubscriptionCreateParams.Addon> | null;
    /**
     * List of payment methods allowed during checkout.
     *
     * Customers will **never** see payment methods that are **not** in this list.
     * However, adding a method here **does not guarantee** customers will see it.
     * Availability still depends on other factors (e.g., customer location, merchant
     * settings).
     */
    allowed_payment_method_types?: Array<'credit' | 'debit' | 'upi_collect' | 'upi_intent' | 'apple_pay' | 'cashapp' | 'google_pay' | 'multibanco' | 'bancontact_card' | 'eps' | 'ideal' | 'przelewy24' | 'affirm' | 'klarna' | 'sepa' | 'ach' | 'amazon_pay' | 'afterpay_clearpay'> | null;
    billing_currency?: MiscAPI.Currency | null;
    /**
     * Discount Code to apply to the subscription
     */
    discount_code?: string | null;
    metadata?: Record<string, string>;
    on_demand?: SubscriptionCreateParams.OnDemand | null;
    /**
     * If true, generates a payment link. Defaults to false if not specified.
     */
    payment_link?: boolean | null;
    /**
     * Optional URL to redirect after successful subscription creation
     */
    return_url?: string | null;
    /**
     * Display saved payment methods of a returning customer False by default
     */
    show_saved_payment_methods?: boolean;
    /**
     * Tax ID in case the payment is B2B. If tax id validation fails the payment
     * creation will fail
     */
    tax_id?: string | null;
    /**
     * Optional trial period in days If specified, this value overrides the trial
     * period set in the product's price Must be between 0 and 10000 days
     */
    trial_period_days?: number | null;
}
export declare namespace SubscriptionCreateParams {
    interface Addon {
        addon_id: string;
        quantity: number;
    }
    interface OnDemand {
        /**
         * If set as True, does not perform any charge and only authorizes payment method
         * details for future use.
         */
        mandate_only: boolean;
        /**
         * Product price for the initial charge to customer If not specified the stored
         * price of the product will be used Represented in the lowest denomination of the
         * currency (e.g., cents for USD). For example, to charge $1.00, pass `100`.
         */
        product_price?: number | null;
    }
}
export interface SubscriptionUpdateParams {
    billing?: PaymentsAPI.BillingAddress | null;
    cancel_at_next_billing_date?: boolean | null;
    disable_on_demand?: SubscriptionUpdateParams.DisableOnDemand | null;
    metadata?: Record<string, string> | null;
    status?: SubscriptionStatus | null;
    tax_id?: string | null;
}
export declare namespace SubscriptionUpdateParams {
    interface DisableOnDemand {
        next_billing_date: string;
    }
}
export interface SubscriptionListParams extends DefaultPageNumberPaginationParams {
    /**
     * filter by Brand id
     */
    brand_id?: string | null;
    /**
     * Get events after this created time
     */
    created_at_gte?: string | null;
    /**
     * Get events created before this time
     */
    created_at_lte?: string | null;
    /**
     * Filter by customer id
     */
    customer_id?: string | null;
    /**
     * Filter by status
     */
    status?: SubscriptionStatus | null;
}
export interface SubscriptionChangePlanParams {
    /**
     * Unique identifier of the product to subscribe to
     */
    product_id: string;
    proration_billing_mode: 'prorated_immediately';
    /**
     * Number of units to subscribe for. Must be at least 1.
     */
    quantity: number;
    /**
     * Addons for the new plan. Note : Leaving this empty would remove any existing
     * addons
     */
    addons?: Array<SubscriptionChangePlanParams.Addon> | null;
}
export declare namespace SubscriptionChangePlanParams {
    interface Addon {
        addon_id: string;
        quantity: number;
    }
}
export interface SubscriptionChargeParams {
    /**
     * The product price. Represented in the lowest denomination of the currency (e.g.,
     * cents for USD). For example, to charge $1.00, pass `100`.
     */
    product_price: number;
    metadata?: Record<string, string> | null;
}
export declare namespace Subscriptions {
    export { type AddonCartResponseItem as AddonCartResponseItem, type Subscription as Subscription, type SubscriptionStatus as SubscriptionStatus, type TimeInterval as TimeInterval, type SubscriptionCreateResponse as SubscriptionCreateResponse, type SubscriptionListResponse as SubscriptionListResponse, type SubscriptionChargeResponse as SubscriptionChargeResponse, SubscriptionListResponsesDefaultPageNumberPagination as SubscriptionListResponsesDefaultPageNumberPagination, type SubscriptionCreateParams as SubscriptionCreateParams, type SubscriptionUpdateParams as SubscriptionUpdateParams, type SubscriptionListParams as SubscriptionListParams, type SubscriptionChangePlanParams as SubscriptionChangePlanParams, type SubscriptionChargeParams as SubscriptionChargeParams, };
}
//# sourceMappingURL=subscriptions.d.ts.map